{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n add_succ a 0,\r\n add_zero a\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero 0,\r\nrefl,\r\nrw [\r\n  add_succ 0 d,\r\n  hd\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\r\nrw [\r\n  add_zero b,\r\n  add_zero (a + b)\r\n],\r\nrefl,\r\nrw [\r\n  add_succ (a + b) d,\r\n  add_succ b d,\r\n  add_succ a (b + d),\r\n  hd\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\r\nrw [\r\n  add_zero (succ(a)),\r\n  add_zero a\r\n],\r\nrefl,\r\nrw [\r\n  add_succ (succ (a)) c,\r\n  add_succ a c,\r\n  hc\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\r\nrw [\r\n  add_zero a,\r\n  zero_add a\r\n],\r\nrefl,\r\nrw [\r\n  add_succ a c,\r\n  succ_add c a,\r\n  hc\r\n],\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  one_eq_succ_zero,\r\n  add_succ n 0,\r\n  add_zero n\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  add_assoc a b c,\r\n  add_comm b c,\r\n  ← add_assoc a c b\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with n hn,\r\nrw mul_zero 0,\r\nrefl,\r\nrw [\r\n  mul_succ 0 n,\r\n  add_zero (0 * n),\r\n  hn\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  one_eq_succ_zero, \r\n  mul_succ m 0,\r\n  mul_zero m,\r\n  zero_add m\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\ninduction m with n hn,\r\nrw mul_zero (succ 0),\r\nrefl,\r\nrw [\r\n  mul_succ (succ 0) n,\r\n  hn,\r\n  add_succ n 0,\r\n  add_zero n\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\r\nrw [\r\n  add_zero a,\r\n  mul_zero t,\r\n  add_zero (t * a)\r\n],\r\nrefl,\r\nrw [\r\n  add_succ a c,\r\n  mul_succ t (a + c),\r\n  mul_succ t c,\r\n  ← add_assoc (t * a) (t * c) t,\r\n  hc\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\r\nrw [\r\n  mul_zero (a * b),\r\n  mul_zero b,\r\n  mul_zero a\r\n],\r\nrefl,\r\nrw [\r\n  mul_succ (a * b) d,\r\n  mul_succ b d,\r\n  hd,\r\n  ← mul_add a (b * d) b\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\r\nrw [\r\n  mul_zero (succ a),\r\n  mul_zero a,\r\n  add_zero 0\r\n],\r\nrefl,\r\nrw [\r\n  mul_succ (succ a) c,\r\n  add_succ (a * succ c) c,\r\n  mul_succ a c,\r\n  hc,\r\n  add_succ (a * c + c) a,\r\n  add_assoc (a * c) c a,\r\n  add_comm c a,\r\n  ← add_assoc (a * c) a c\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with u hu,\r\nrw [\r\n  mul_zero (a + b),\r\n  mul_zero a,\r\n  mul_zero b,\r\n  add_zero 0\r\n],\r\nrefl,\r\nrw [\r\n  mul_succ (a + b) u,\r\n  mul_succ a u,\r\n  mul_succ b u,\r\n  hu,\r\n  add_assoc (a * u) a (b * u + b),\r\n  add_comm a (b * u + b),\r\n  add_assoc (b * u) b a,\r\n  add_comm b a,\r\n  ← add_assoc (a * u) (b * u) (a + b)\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\r\nrw [\r\n  mul_zero a,\r\n  zero_mul a\r\n],\r\nrefl,\r\nrw [\r\n  mul_succ a c,\r\n  succ_mul c a,\r\n  hc\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  ← mul_assoc a b c,\r\n  mul_comm a b,\r\n  mul_assoc b a c\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero 0,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  pow_succ 0 m,\r\n  mul_zero (0 ^ m)\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  one_eq_succ_zero,\r\n  pow_succ a 0,\r\n  pow_zero a,\r\n  one_mul a\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with n hn,\r\nrw pow_zero 1,\r\nrefl,\r\nrw [\r\n  pow_succ 1 n,\r\n  hn,\r\n  mul_one 1\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with o ho,\r\nrw [\r\n  add_zero m,\r\n  pow_zero a,\r\n  mul_one (a ^ m)\r\n],\r\nrefl,\r\nrw [\r\n  add_succ m o,\r\n  pow_succ a (m + o),\r\n  ho,\r\n  pow_succ a o,\r\n  mul_assoc (a ^ m) (a ^ o) a\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with m hm,\r\nrw [\r\n  pow_zero (a * b),\r\n  pow_zero a,\r\n  pow_zero b,\r\n  mul_one 1\r\n],\r\nrefl,\r\nrw [\r\n  pow_succ (a * b) m,\r\n  pow_succ a m,\r\n  pow_succ b m,\r\n  hm,\r\n  mul_assoc (a ^ m) a (b ^ m * b),\r\n  mul_comm a (b ^ m * b),\r\n  mul_assoc (b ^ m) b a,\r\n  mul_comm b a,\r\n  ← mul_assoc (a ^ m) (b ^ m) (a * b)\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with o ho,\r\nrw [\r\n  pow_zero (a ^ m),\r\n  mul_zero m,\r\n  pow_zero a\r\n],\r\nrefl,\r\nrw [\r\n  pow_succ (a ^ m) o,\r\n  ho,\r\n  mul_succ m o,\r\n  pow_add a (m * o) m\r\n],\r\nrefl,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw [\r\n  two_eq_succ_one, \r\n  one_eq_succ_zero,\r\n  pow_succ (a + b) (succ 0),\r\n  pow_succ (a + b) 0,\r\n  pow_succ a (succ 0),\r\n  pow_succ a 0,\r\n  pow_succ b (succ 0),\r\n  pow_succ b 0,\r\n  pow_zero (a + b),\r\n  one_mul (a + b),\r\n  pow_zero a,\r\n  one_mul a,\r\n  pow_zero b,\r\n  one_mul b,\r\n  mul_add (a + b) a b,\r\n  add_mul a b a,\r\n  add_mul a b b,\r\n  mul_comm b a,\r\n  add_comm (a * b) (b * b),\r\n  add_assoc (a * a) (a * b) (b * b + a * b),\r\n  add_comm (a * b) (b * b + a * b),\r\n  add_assoc (b * b) (a * b) (a * b),\r\n  ← add_assoc (a * a) (b * b) (a * b + a * b),\r\n  succ_mul (succ 0) a,\r\n  succ_mul 0 a,\r\n  zero_mul a,\r\n  zero_add a,\r\n  add_mul a a b\r\n],\r\nrefl,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 5*n+3,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q: Q := h p,\r\nhave t: T := j q,\r\nhave u : U := l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "apply l,\r\napply j,\r\napply h,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro hpqr,\r\nintro hpq,\r\nintro p,\r\nhave hqr: (Q → R) := hpqr p,\r\nhave q : Q := hpq p,\r\nhave r: R := hqr q,\r\nexact r,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro hqf,\r\nintro p,\r\nhave f: F := hqf (hpq p),\r\nexact f,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro hq_,\r\nintro p,\r\napply hq_,\r\nhave q: Q := hpq p,\r\nexact q,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\nhave b: B := f1 a,\r\nhave e: E := f2 b,\r\nhave f: F := f5 e,\r\nhave g: G := f8 f,\r\nhave j: J := f9 g,\r\nhave i: I := f11 j,\r\nhave l: L := f15 i,\r\nexact l,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q: Q := h p,\r\nhave t: T := j q,\r\nhave u: U := l t,\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "apply l,\r\napply j,\r\napply h,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros hpqr hpq p,\r\napply hpqr,\r\nexact p,\r\napply hpq,\r\nexact p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr p,\r\napply hqr,\r\napply hpq,\r\nexact p,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro h'q,\r\nintro p,\r\nhave q: Q := hpq p,\r\nexact h'q q,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p q,\r\nsplit,\r\nexact q,\r\nexact p,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\nsplit,\r\ncases hpq with p q,\r\nexact p,\r\ncases hqr with q r,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros h1 h2,\r\ncases h1 with hpq hqp,\r\ncases h2 with hqr hrq,\r\nsplit,\r\nintro p,\r\nexact hqr (hpq p),\r\nintro r,\r\nexact hqp (hrq r),"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\nsplit,\r\nintro p,\r\napply hqr.1,\r\napply hpq.1,\r\nexact p,\r\nintro r,\r\napply hpq.2,\r\napply hqr.2,\r\nexact r,"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p q,\r\nright,\r\nexact p,\r\nleft,\r\nexact q,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro hpqr,\r\ncases hpqr with p hqr,\r\ncases hqr with q r,\r\nleft,\r\nsplit,\r\nexact p,\r\nexact q,\r\nright,\r\nsplit,\r\nexact p,\r\nexact r,\r\nintro hpqpr,\r\ncases hpqpr with hpq hpr,\r\nsplit,\r\nexact hpq.1,\r\nleft,\r\nexact hpq.2,\r\nsplit,\r\nexact hpr.1,\r\nright,\r\nexact hpr.2,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro hp_p,\r\ncases hp_p with p _p,\r\nexfalso,\r\napply _p,\r\nexact p,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q : Q,\r\nintros h_q_p1 p1,\r\nexact q,\r\nintros h_q_p2 p2,\r\nexfalso,\r\nhave _p2: ¬P := h_q_p2 q,\r\nexact _p2 p2,\r\nintros h_q_p3 p3,\r\nexact q,\r\nintros h_q_p4 p4,\r\nexfalso,\r\nexact p p4,"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "have hab: (a = b) := succ_inj hs,\r\nexact hab,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "have hsasb: (succ a = succ b) := succ_inj h,\r\nexact succ_inj hsasb,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro hab,\r\nrw hab,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact succ_inj,\r\nexact succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with u hu,\r\nrw [\r\n  add_zero a,\r\n  add_zero b\r\n] at h,\r\nexact h,\r\nrw [\r\n  add_succ a u,\r\n  add_succ b u\r\n] at h,\r\nexact hu (succ_inj h),"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw [\r\n  add_comm t a,\r\n  add_comm t b\r\n] at h,\r\nexact add_right_cancel a t b h,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "editorText": "sorry"
    }
  ]
}